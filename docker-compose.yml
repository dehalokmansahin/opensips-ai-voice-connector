services:
  # AI Voice Backend - Receives calls from OpenSIPS proxy and creates AI pipelines
  ai-voice-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-voice-backend
    hostname: ai-voice-backend
    command: ["oavc"]
    ports:
      # AI Voice Backend SIP interface (receives calls from OpenSIPS)
      - "${AI_BACKEND_PORT:-8089}:8089/udp"
      - "${AI_BACKEND_PORT:-8089}:8089/tcp"
      # RTP ports for AI voice pipelines (extended range)
      - "35000:35000/udp"
      - "35001:35001/udp"
      - "35002:35002/udp"
      - "35003:35003/udp"
      - "35004:35004/udp"
      - "35005:35005/udp"
      - "35006:35006/udp"
      - "35007:35007/udp"
      - "35008:35008/udp"
      - "35009:35009/udp"
      - "35010:35010/udp"
      - "35011:35011/udp"
      - "35012:35012/udp"
      - "35013:35013/udp"
      - "35014:35014/udp"
      - "35015:35015/udp"
      - "35016:35016/udp"
      - "35017:35017/udp"
      - "35018:35018/udp"
      - "35019:35019/udp"
      - "35020:35020/udp"
      # Extended range for higher ports
      - "35021:35021/udp"
      - "35022:35022/udp"
      - "35023:35023/udp"
      - "35024:35024/udp"
      - "35025:35025/udp"
      - "35026:35026/udp"
      - "35027:35027/udp"
      - "35028:35028/udp"
      - "35029:35029/udp"
      - "35030:35030/udp"
      - "35031:35031/udp"
      - "35032:35032/udp"
      - "35033:35033/udp"
      - "35034:35034/udp"
      - "35035:35035/udp"
      - "35036:35036/udp"
      - "35037:35037/udp"
      - "35038:35038/udp"
      - "35039:35039/udp"
      - "35040:35040/udp"
      - "35041:35041/udp"
      - "35042:35042/udp"
      - "35043:35043/udp"
      - "35044:35044/udp"
      - "35045:35045/udp"
      - "35046:35046/udp"
      - "35047:35047/udp"
      - "35048:35048/udp"
      - "35049:35049/udp"
      - "35050:35050/udp"
      - "35051:35051/udp"
      - "35052:35052/udp"
      - "35053:35053/udp"
      - "35054:35054/udp"
      - "35055:35055/udp"
      - "35056:35056/udp"
      - "35057:35057/udp"
      - "35058:35058/udp"
      - "35059:35059/udp"
      - "35060:35060/udp"
      - "35061:35061/udp"
      - "35062:35062/udp"
      - "35063:35063/udp"
      - "35064:35064/udp"
      - "35065:35065/udp"
      - "35066:35066/udp"
      - "35067:35067/udp"
      - "35068:35068/udp"
      - "35069:35069/udp"
      - "35070:35070/udp"
      - "35071:35071/udp"
      - "35072:35072/udp"
      - "35073:35073/udp"
      - "35074:35074/udp"
      - "35075:35075/udp"
      - "35076:35076/udp"
      - "35077:35077/udp"
      - "35078:35078/udp"
      - "35079:35079/udp"
      - "35080:35080/udp"
      - "35081:35081/udp"
      - "35082:35082/udp"
      - "35083:35083/udp"
      - "35084:35084/udp"
      - "35085:35085/udp"
      - "35086:35086/udp"
      - "35087:35087/udp"
      - "35088:35088/udp"
      - "35089:35089/udp"
      - "35090:35090/udp"
      - "35091:35091/udp"
      - "35092:35092/udp"
      - "35093:35093/udp"
      - "35094:35094/udp"
      - "35095:35095/udp"
      - "35096:35096/udp"
      - "35097:35097/udp"
      - "35098:35098/udp"
      - "35099:35099/udp"
      - "35100:35100/udp"
    volumes:
      - ./logs:/app/logs
    environment:
      - PYTHONPATH=/app
      
      # üê≥ Docker Environment Detection
      - DOCKER_CONTAINER=true
      - RTP_HOST_IP=${RTP_HOST_IP:-192.168.1.120}
      
      # ü§ñ AI Services Configuration (Telnyx-style environment variables)
      - VOSK_WEBSOCKET_URL=ws://vosk-server:${VOSK_PORT:-2700}
      - LLAMA_WEBSOCKET_URL=ws://llm-turkish-server:${LLM_PORT:-8765}
      - LLAMA_MODEL=${LLM_MODEL:-llama3.2-turkish}
      - PIPER_WEBSOCKET_URL=ws://piper-tts-server:${PIPER_PORT:-8000}/tts
      
      # üéµ Audio Configuration
      - AUDIO_SAMPLE_RATE=${AUDIO_SAMPLE_RATE:-16000}
      - AUDIO_CHANNELS=${AUDIO_CHANNELS:-1}
      - AUDIO_FORMAT=${AUDIO_FORMAT:-pcm16}
      
      # üí¨ Turkish Conversation Configuration  
      - SYSTEM_PROMPT=${SYSTEM_PROMPT:-Merhaba! Size nasƒ±l yardƒ±mcƒ± olabilirim? Kƒ±sa ve net cevaplar vereceƒüim.}
      - CONVERSATION_LANGUAGE=${CONVERSATION_LANGUAGE:-tr-TR}
      - CONVERSATION_MAX_TURNS=${CONVERSATION_MAX_TURNS:-20}
      
      # ‚úÖ Native Pipecat VAD Configuration (Turkish-optimized)
      - VAD_CONFIDENCE=${VAD_CONFIDENCE:-0.3}
      - VAD_START_SECS=${VAD_START_SECS:-0.05}
      - VAD_STOP_SECS=${VAD_STOP_SECS:-0.3}
      - VAD_MIN_VOLUME=${VAD_MIN_VOLUME:-0.001}
      
      # üîß Advanced Configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_INTERRUPTIONS=${ENABLE_INTERRUPTIONS:-true}
      - PIPELINE_TIMEOUT=${PIPELINE_TIMEOUT:-30}
      
    networks:
      - opensips_network
    depends_on:
      - opensips
      - vosk-server
      - piper-tts-server
      - llm-turkish-server
    restart: always
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.connect(('localhost', 8089)); s.close()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # OpenSIPS SIP Proxy - Using dynamic configuration
  opensips:
    image: opensips/opensips:3.6  # Orijinal OpenSIPS image'ƒ± kullan
    container_name: opensips
    ports:
      # Main SIP ports
      - "${OPENSIPS_SIP_PORT:-5060}:5060/udp"
      - "${OPENSIPS_SIP_PORT:-5060}:5060/tcp"
      # Secondary SIP port
      - "${OPENSIPS_SIP_SECONDARY_PORT:-8080}:8080/udp"
      # MI Datagram interface (Management Interface)
      - "${OPENSIPS_MI_PORT:-8087}:8087/udp" 
      # Event Datagram interface (Event notifications) 
      - "${OPENSIPS_EVENT_PORT:-8090}:8090/udp"
    volumes:
      # OpenSIPS config - statik mount (template processing ≈üimdilik devre dƒ±≈üƒ±)
      - ./cfg/opensips.cfg:/etc/opensips/opensips.cfg
      # OpenSIPS logs
      - ./logs/opensips:/var/log/opensips
    environment:
      # OpenSIPS configuration
      - OPENSIPS_MI_PORT=${OPENSIPS_MI_PORT:-8087}
      - OPENSIPS_EVENT_PORT=${OPENSIPS_EVENT_PORT:-8090}
      - OPENSIPS_SIP_SECONDARY_PORT=${OPENSIPS_SIP_SECONDARY_PORT:-8080}
      - AI_BACKEND_HOST=ai-voice-backend
      - AI_BACKEND_PORT=${AI_BACKEND_PORT:-8089}
      
      # Logging
      - OPENSIPS_LOG_LEVEL=${OPENSIPS_LOG_LEVEL:-3}
      - OPENSIPS_LOG_FACILITY=${OPENSIPS_LOG_FACILITY:-local0}
      
    networks:
      - opensips_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Vosk STT Server
  vosk-server:
    image: dehalokmansahin/vosk-server:latest
    container_name: vosk-server
    ports:
      - "${VOSK_PORT:-2700}:2700"
    environment:
      - MODEL_PATH=/opt/vosk-model
      - SAMPLE_RATE=${VOSK_SAMPLE_RATE:-16000}
      - WEBSOCKET_PORT=${VOSK_PORT:-2700}
      - LOG_LEVEL=${VOSK_LOG_LEVEL:-INFO}
    volumes:
      # Model cache for faster startup
      - vosk_models:/opt/vosk-model
      - ./logs/vosk:/var/log/vosk
    networks:
      - opensips_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2700/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # Piper TTS Server
  piper-tts-server:
    image: piper-tts-server:latest
    container_name: piper-tts-server
    ports:
      - "${PIPER_PORT:-8000}:8000"
      - "${PIPER_HTTP_PORT:-8001}:8001"
    environment:
      - MODEL_PATH=/app/models
      - VOICE_MODEL=${PIPER_VOICE_MODEL:-tr_TR-dfki-medium}
      - SAMPLE_RATE=${PIPER_SAMPLE_RATE:-22050}
      - TTS_PORT=${PIPER_PORT:-8000}
      - HTTP_PORT=${PIPER_HTTP_PORT:-8001}
      - LOG_LEVEL=${PIPER_LOG_LEVEL:-INFO}
    volumes:
      - piper_models:/app/models
      - piper_cache:/app/cache
      - ./logs/piper:/var/log/piper
    networks:
      - opensips_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # LLM Turkish Server (Llama3.2 Turkish Model)
  llm-turkish-server:
    image: dehalokmansahin/llm-turkish-server:latest
    container_name: llm-turkish-server
    ports:
      - "${LLM_PORT:-8765}:8765"
    environment:
      - MODEL_NAME=${LLM_MODEL:-llama3.2:3b-instruct-turkish}
      - MAX_TOKENS=${LLM_MAX_TOKENS:-80}
      - TEMPERATURE=${LLM_TEMPERATURE:-0.2}
      - TOP_P=${LLM_TOP_P:-0.7}
      - WEBSOCKET_PORT=${LLM_PORT:-8765}
      - LOG_LEVEL=${LLM_LOG_LEVEL:-INFO}
      - CUDA_VISIBLE_DEVICES=${LLM_GPU_DEVICE:-0}
    volumes:
      - llm_models:/app/models
      - llm_cache:/app/cache
      - ./logs/llm:/var/log/llm
    networks:
      - opensips_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8765/health", "||", "exit", "1"]
      interval: 45s
      timeout: 15s
      retries: 3
      start_period: 120s

  # OpenSIPS Event Monitor (Opsiyonel - debug i√ßin)
  opensips-event-monitor:
    build: .
    container_name: opensips-event-monitor
    command: ["event-monitor"]
    environment:
      - OPENSIPS_HOST=opensips
      - OPENSIPS_EVENT_PORT=${OPENSIPS_EVENT_PORT:-8090}
      - OPENSIPS_MI_PORT=${OPENSIPS_MI_PORT:-8087}
      - LOG_LEVEL=${EVENT_MONITOR_LOG_LEVEL:-INFO}
    volumes:
      - ./src:/app/src
      - ./logs/event-monitor:/var/log/event-monitor
    networks:
      - opensips_network
    depends_on:
      - opensips
    restart: unless-stopped
    profiles:
      - debug
      - monitoring

  # PostgreSQL Database (Opsiyonel - gelecekte call logging i√ßin)
  postgres:
    image: postgres:15-alpine
    container_name: opensips-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-opensips}
      - POSTGRES_USER=${POSTGRES_USER:-opensips}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-opensips_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - opensips_network
    restart: unless-stopped
    profiles:
      - database
      - production

  # Redis Cache (Opsiyonel - session management i√ßin)
  redis:
    image: redis:7-alpine
    container_name: opensips-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    networks:
      - opensips_network
    restart: unless-stopped
    profiles:
      - cache
      - production

networks:
  opensips_network:
    driver: bridge
    name: opensips_network
    # Tamamen dinamik - Docker'ƒ±n otomatik service discovery kullanƒ±lƒ±yor
    # Container'lar hostname ile birbirlerini bulabilir

volumes:
  piper_models:
    driver: local
    name: opensips_piper_models
  piper_cache:
    driver: local
    name: opensips_piper_cache
  vosk_models:
    driver: local
    name: opensips_vosk_models
  llm_models:
    driver: local
    name: opensips_llm_models
  llm_cache:
    driver: local
    name: opensips_llm_cache
  postgres_data:
    driver: local
    name: opensips_postgres_data
  redis_data:
    driver: local
    name: opensips_redis_data
  model_data:
    driver: local
    name: opensips_model_data
