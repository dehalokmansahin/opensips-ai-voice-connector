#
# OpenSIPS residential configuration script
# for Turkish Banking IVR Flow Automation System
#

####### Global Parameters #########

# Logging configuration
log_level=3
xlog_level=3
log_stderror=yes
log_facility=LOG_LOCAL0

# Process configuration  
udp_workers=4

# Network configuration - listen on all interfaces
listen=udp:0.0.0.0:5060
listen=tcp:0.0.0.0:5060

####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module  
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerations module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### HTTP Management Interface  
loadmodule "mi_http.so"
modparam("mi_http", "port", 8888)
modparam("mi_http", "root", "mi")

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### MYSQL module
loadmodule "db_mysql.so"

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-no-db")

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")

#### ACCounting module
loadmodule "acc.so"
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
modparam("acc", "detect_direction", 0)

#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"

#### ALIAS module
loadmodule "alias_db.so"

#### DOMAIN module  
loadmodule "domain.so"

#### PERMISSIONS module
loadmodule "permissions.so"

#### PIKE module
loadmodule "pike.so"
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

#### TEXTOPS module
loadmodule "textops.so"

#### EXEC module
loadmodule "exec.so"

#### DIALOG module  
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
modparam("dialog", "db_mode", 0)

#### NAT modules
loadmodule "nathelper.so"
modparam("nathelper", "natping_interval", 10)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", "SIP_PING_FLAG")
modparam("nathelper", "sipping_from", "sip:pinger@localhost")

loadmodule "rtpproxy.so"
modparam("rtpproxy", "rtpproxy_sock", "udp:localhost:22222")

#### Load REST client for AI service integration
loadmodule "rest_client.so"

#### JSON module for parsing AI responses
loadmodule "json.so"

####### Routing Logic ########

# main request routing logic

route{
	
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if (has_totag()) {
		# handle hop-by-hop ACK (no routing required)
		if ( is_method("ACK") && t_check_trans() ) {
			t_relay();
			exit;
		}
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if ( !loose_route() ) {
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			sl_send_reply("404","Not here");
			exit;
		}
		
		if (is_method("BYE")) {
			# do accounting even if the transaction fails
			do_accounting("log","failed");
		}
		
		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		route(1);
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	# absorb retransmissions, but do not create transaction
	t_check_trans();

	if ( !(is_method("REGISTER")  ) ) {
		
		if (is_myself("$fd")) {
					
		} else {
			# if caller is not local, then called number must be local
			
			if (!is_myself("$rd")) {
				send_reply("403","Relay Forbidden");
				exit;
			}
		}

	}

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
		"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply("403","Preload Route denied");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	# account only INVITEs
	if (is_method("INVITE")) {
		
		# create dialog with timeout
		if ( !create_dialog("B") ) {
			send_reply("500","Internal Server Error");
			exit;
		}
		
		do_accounting("log");
	}

	
	if (!is_myself("$rd")) {
		append_hf("P-hint: outbound\r\n"); 
		route(1);
		exit;
	}

	# requests for my domain
	
	## authentication for REGISTER requests
	if (is_method("REGISTER")) {
		
		if (!save("location"))
			sl_reply_error();

		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# IVR System Integration - Route calls to AI processing
	if (is_method("INVITE")) {
		
		# Set flag for IVR processing
		setflag("IVR_CALL");
		
		# Call AI Core service for call processing
		route(IVR_PROCESSING);
		
		# Continue with normal call routing
		if (!lookup("location","m")) {
			t_newtran();
			t_reply("404", "Not Found");
			exit;
		}
	}

	# apply DB based aliases
	alias_db_lookup("dbaliases");

	if (!lookup("location","m")) {

		if (!lookup("location","m")) {
			t_newtran();
			t_reply("404", "Not Found");
			exit;
		}
	}

	route(1);
}


route[1] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("2");
		t_on_reply("2");
		t_on_failure("1");
	}

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}


# IVR Processing Route - Integration with AI Core
route[IVR_PROCESSING] {
	
	xlog("L_INFO", "IVR Processing: Call from $fu to $ru\n");
	
	# Extract caller information
	$var(caller) = $fu;
	$var(called) = $ru;
	
	# Prepare JSON payload for AI Core
	$var(json_payload) = "{"
		+ "\"caller\":\"" + $var(caller) + "\","
		+ "\"called\":\"" + $var(called) + "\","
		+ "\"call_id\":\"" + $ci + "\","
		+ "\"method\":\"" + $rm + "\","
		+ "\"timestamp\":\"" + $Ts + "\""
		+ "}";
	
	# Call AI Core service
	rest_post("http://opensips-ai-core:8080/api/v1/call/start", 
		"$var(json_payload)", 
		"application/json", 
		"$var(ai_response)", 
		"$var(ai_response_code)");
	
	if ($var(ai_response_code) == 200) {
		xlog("L_INFO", "AI Core Response: $var(ai_response)\n");
		
		# Parse AI response
		if (json_get_field("$var(ai_response)", "action", "$var(action)")) {
			
			if ($var(action) == "accept") {
				xlog("L_INFO", "AI Core accepted call for IVR processing\n");
				# Continue with IVR processing
			} else if ($var(action) == "reject") {
				xlog("L_INFO", "AI Core rejected call\n");
				send_reply("486", "Busy Here");
				exit;
			}
		}
	} else {
		xlog("L_ERR", "Failed to contact AI Core: $var(ai_response_code)\n");
		# Continue with normal processing if AI Core is unavailable
	}
}


branch_route[2] {
	xlog("new branch at $ru\n");
}


onreply_route[2] {
	xlog("incoming reply\n");
}


failure_route[1] {
	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}

}