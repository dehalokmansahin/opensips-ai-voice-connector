# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import ai_voice_connector_pb2 as ai__voice__connector__pb2
import common_pb2 as common__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ai_voice_connector_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AIVoiceConnectorServiceStub(object):
    """Main AI Voice Connector service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSession = channel.unary_unary(
                '/opensips.ai.voice_connector.AIVoiceConnectorService/CreateSession',
                request_serializer=ai__voice__connector__pb2.CreateSessionRequest.SerializeToString,
                response_deserializer=ai__voice__connector__pb2.CreateSessionResponse.FromString,
                _registered_method=True)
        self.EndSession = channel.unary_unary(
                '/opensips.ai.voice_connector.AIVoiceConnectorService/EndSession',
                request_serializer=ai__voice__connector__pb2.EndSessionRequest.SerializeToString,
                response_deserializer=ai__voice__connector__pb2.EndSessionResponse.FromString,
                _registered_method=True)
        self.GetSession = channel.unary_unary(
                '/opensips.ai.voice_connector.AIVoiceConnectorService/GetSession',
                request_serializer=ai__voice__connector__pb2.GetSessionRequest.SerializeToString,
                response_deserializer=ai__voice__connector__pb2.GetSessionResponse.FromString,
                _registered_method=True)
        self.ProcessAudioStream = channel.stream_stream(
                '/opensips.ai.voice_connector.AIVoiceConnectorService/ProcessAudioStream',
                request_serializer=ai__voice__connector__pb2.ProcessAudioRequest.SerializeToString,
                response_deserializer=ai__voice__connector__pb2.ProcessAudioResponse.FromString,
                _registered_method=True)
        self.ProcessAudioChunk = channel.unary_unary(
                '/opensips.ai.voice_connector.AIVoiceConnectorService/ProcessAudioChunk',
                request_serializer=ai__voice__connector__pb2.ProcessAudioChunkRequest.SerializeToString,
                response_deserializer=ai__voice__connector__pb2.ProcessAudioChunkResponse.FromString,
                _registered_method=True)
        self.GetPipelineStatus = channel.unary_unary(
                '/opensips.ai.voice_connector.AIVoiceConnectorService/GetPipelineStatus',
                request_serializer=ai__voice__connector__pb2.GetPipelineStatusRequest.SerializeToString,
                response_deserializer=ai__voice__connector__pb2.GetPipelineStatusResponse.FromString,
                _registered_method=True)
        self.GetActiveSessionStats = channel.unary_unary(
                '/opensips.ai.voice_connector.AIVoiceConnectorService/GetActiveSessionStats',
                request_serializer=ai__voice__connector__pb2.GetActiveSessionStatsRequest.SerializeToString,
                response_deserializer=ai__voice__connector__pb2.GetActiveSessionStatsResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/opensips.ai.voice_connector.AIVoiceConnectorService/HealthCheck',
                request_serializer=common__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=common__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class AIVoiceConnectorServiceServicer(object):
    """Main AI Voice Connector service
    """

    def CreateSession(self, request, context):
        """Session management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessAudioStream(self, request_iterator, context):
        """Audio processing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessAudioChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPipelineStatus(self, request, context):
        """Pipeline management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActiveSessionStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AIVoiceConnectorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSession,
                    request_deserializer=ai__voice__connector__pb2.CreateSessionRequest.FromString,
                    response_serializer=ai__voice__connector__pb2.CreateSessionResponse.SerializeToString,
            ),
            'EndSession': grpc.unary_unary_rpc_method_handler(
                    servicer.EndSession,
                    request_deserializer=ai__voice__connector__pb2.EndSessionRequest.FromString,
                    response_serializer=ai__voice__connector__pb2.EndSessionResponse.SerializeToString,
            ),
            'GetSession': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSession,
                    request_deserializer=ai__voice__connector__pb2.GetSessionRequest.FromString,
                    response_serializer=ai__voice__connector__pb2.GetSessionResponse.SerializeToString,
            ),
            'ProcessAudioStream': grpc.stream_stream_rpc_method_handler(
                    servicer.ProcessAudioStream,
                    request_deserializer=ai__voice__connector__pb2.ProcessAudioRequest.FromString,
                    response_serializer=ai__voice__connector__pb2.ProcessAudioResponse.SerializeToString,
            ),
            'ProcessAudioChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessAudioChunk,
                    request_deserializer=ai__voice__connector__pb2.ProcessAudioChunkRequest.FromString,
                    response_serializer=ai__voice__connector__pb2.ProcessAudioChunkResponse.SerializeToString,
            ),
            'GetPipelineStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPipelineStatus,
                    request_deserializer=ai__voice__connector__pb2.GetPipelineStatusRequest.FromString,
                    response_serializer=ai__voice__connector__pb2.GetPipelineStatusResponse.SerializeToString,
            ),
            'GetActiveSessionStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActiveSessionStats,
                    request_deserializer=ai__voice__connector__pb2.GetActiveSessionStatsRequest.FromString,
                    response_serializer=ai__voice__connector__pb2.GetActiveSessionStatsResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=common__pb2.HealthCheckRequest.FromString,
                    response_serializer=common__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'opensips.ai.voice_connector.AIVoiceConnectorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('opensips.ai.voice_connector.AIVoiceConnectorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AIVoiceConnectorService(object):
    """Main AI Voice Connector service
    """

    @staticmethod
    def CreateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.voice_connector.AIVoiceConnectorService/CreateSession',
            ai__voice__connector__pb2.CreateSessionRequest.SerializeToString,
            ai__voice__connector__pb2.CreateSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EndSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.voice_connector.AIVoiceConnectorService/EndSession',
            ai__voice__connector__pb2.EndSessionRequest.SerializeToString,
            ai__voice__connector__pb2.EndSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.voice_connector.AIVoiceConnectorService/GetSession',
            ai__voice__connector__pb2.GetSessionRequest.SerializeToString,
            ai__voice__connector__pb2.GetSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessAudioStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/opensips.ai.voice_connector.AIVoiceConnectorService/ProcessAudioStream',
            ai__voice__connector__pb2.ProcessAudioRequest.SerializeToString,
            ai__voice__connector__pb2.ProcessAudioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessAudioChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.voice_connector.AIVoiceConnectorService/ProcessAudioChunk',
            ai__voice__connector__pb2.ProcessAudioChunkRequest.SerializeToString,
            ai__voice__connector__pb2.ProcessAudioChunkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPipelineStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.voice_connector.AIVoiceConnectorService/GetPipelineStatus',
            ai__voice__connector__pb2.GetPipelineStatusRequest.SerializeToString,
            ai__voice__connector__pb2.GetPipelineStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetActiveSessionStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.voice_connector.AIVoiceConnectorService/GetActiveSessionStats',
            ai__voice__connector__pb2.GetActiveSessionStatsRequest.SerializeToString,
            ai__voice__connector__pb2.GetActiveSessionStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.voice_connector.AIVoiceConnectorService/HealthCheck',
            common__pb2.HealthCheckRequest.SerializeToString,
            common__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
