syntax = "proto3";

package opensips.ai.voice_connector;

import "common.proto";

option go_package = "github.com/opensips/ai-voice-connector/proto/voice_connector";

// Main AI Voice Connector service
service AIVoiceConnectorService {
  // Session management
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
  rpc EndSession(EndSessionRequest) returns (EndSessionResponse);
  rpc GetSession(GetSessionRequest) returns (GetSessionResponse);
  
  // Audio processing
  rpc ProcessAudioStream(stream ProcessAudioRequest) returns (stream ProcessAudioResponse);
  rpc ProcessAudioChunk(ProcessAudioChunkRequest) returns (ProcessAudioChunkResponse);
  
  // Pipeline management
  rpc GetPipelineStatus(GetPipelineStatusRequest) returns (GetPipelineStatusResponse);
  rpc GetActiveSessionStats(GetActiveSessionStatsRequest) returns (GetActiveSessionStatsResponse);
  
  // Health check
  rpc HealthCheck(opensips.ai.common.HealthCheckRequest) returns (opensips.ai.common.HealthCheckResponse);
}

// Session management messages
message CreateSessionRequest {
  string call_id = 1;
  string caller_number = 2;
  string called_number = 3;
  map<string, string> metadata = 4;
}

message CreateSessionResponse {
  opensips.ai.common.Status status = 1;
  string session_id = 2;
  opensips.ai.common.SessionInfo session_info = 3;
}

message EndSessionRequest {
  string session_id = 1;
  string reason = 2;
}

message EndSessionResponse {
  opensips.ai.common.Status status = 1;
}

message GetSessionRequest {
  string session_id = 1;
}

message GetSessionResponse {
  opensips.ai.common.Status status = 1;
  opensips.ai.common.SessionInfo session_info = 2;
  opensips.ai.common.ConversationContext context = 3;
}

// Audio processing messages
message ProcessAudioRequest {
  string session_id = 1;
  opensips.ai.common.AudioChunk audio_chunk = 2;
  bool end_of_utterance = 3;
}

message ProcessAudioResponse {
  opensips.ai.common.Status status = 1;
  string session_id = 2;
  
  // Pipeline results
  VADResult vad_result = 3;
  ASRResult asr_result = 4;
  LLMResult llm_result = 5;
  TTSResult tts_result = 6;
  
  // Final response
  opensips.ai.common.AudioChunk response_audio = 7;
  string response_text = 8;
  
  // Performance metrics
  PipelineMetrics metrics = 9;
}

message ProcessAudioChunkRequest {
  string session_id = 1;
  opensips.ai.common.AudioChunk audio_chunk = 2;
}

message ProcessAudioChunkResponse {
  opensips.ai.common.Status status = 1;
  string session_id = 2;
  opensips.ai.common.AudioChunk response_audio = 3;
  PipelineMetrics metrics = 4;
}

// Pipeline results
message VADResult {
  bool voice_detected = 1;
  float confidence = 2;
  opensips.ai.common.Timestamp start_time = 3;
  opensips.ai.common.Timestamp end_time = 4;
}

message ASRResult {
  string transcript = 1;
  float confidence = 2;
  bool is_final = 3;
  repeated ASRAlternative alternatives = 4;
}

message ASRAlternative {
  string transcript = 1;
  float confidence = 2;
}

message LLMResult {
  string response_text = 1;
  opensips.ai.common.BankingIntent intent = 2;
  map<string, string> context_updates = 3;
  bool requires_banking_action = 4;
}

message TTSResult {
  opensips.ai.common.AudioChunk audio = 1;
  string text = 2;
  float processing_time_ms = 3;
}

// Pipeline status and metrics
message GetPipelineStatusRequest {
  string session_id = 1;
}

message GetPipelineStatusResponse {
  opensips.ai.common.Status status = 1;
  PipelineStatus pipeline_status = 2;
}

message PipelineStatus {
  string session_id = 1;
  string current_stage = 2; // vad, asr, llm, tts, idle
  map<string, string> stage_details = 3;
  PipelineMetrics current_metrics = 4;
}

message PipelineMetrics {
  float vad_latency_ms = 1;
  float asr_latency_ms = 2;
  float llm_latency_ms = 3;
  float tts_latency_ms = 4;
  float total_latency_ms = 5;
  opensips.ai.common.Timestamp start_time = 6;
  opensips.ai.common.Timestamp end_time = 7;
}

// Session statistics
message GetActiveSessionStatsRequest {}

message GetActiveSessionStatsResponse {
  opensips.ai.common.Status status = 1;
  SessionStats stats = 2;
}

message SessionStats {
  int32 total_active_sessions = 1;
  map<string, int32> sessions_by_status = 2;
  float average_session_duration_seconds = 3;
  float oldest_session_age_seconds = 4;
  repeated opensips.ai.common.SessionInfo recent_sessions = 5;
}