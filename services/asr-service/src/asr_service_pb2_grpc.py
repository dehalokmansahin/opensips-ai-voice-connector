# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import asr_service_pb2 as asr__service__pb2
import common_pb2 as common__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in asr_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ASRServiceStub(object):
    """Automatic Speech Recognition service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RecognizeSpeech = channel.unary_unary(
                '/opensips.ai.asr.ASRService/RecognizeSpeech',
                request_serializer=asr__service__pb2.RecognizeSpeechRequest.SerializeToString,
                response_deserializer=asr__service__pb2.RecognizeSpeechResponse.FromString,
                _registered_method=True)
        self.RecognizeSpeechStream = channel.stream_stream(
                '/opensips.ai.asr.ASRService/RecognizeSpeechStream',
                request_serializer=asr__service__pb2.RecognizeSpeechRequest.SerializeToString,
                response_deserializer=asr__service__pb2.RecognizeSpeechResponse.FromString,
                _registered_method=True)
        self.ConfigureASR = channel.unary_unary(
                '/opensips.ai.asr.ASRService/ConfigureASR',
                request_serializer=asr__service__pb2.ConfigureASRRequest.SerializeToString,
                response_deserializer=asr__service__pb2.ConfigureASRResponse.FromString,
                _registered_method=True)
        self.GetSupportedLanguages = channel.unary_unary(
                '/opensips.ai.asr.ASRService/GetSupportedLanguages',
                request_serializer=asr__service__pb2.GetSupportedLanguagesRequest.SerializeToString,
                response_deserializer=asr__service__pb2.GetSupportedLanguagesResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/opensips.ai.asr.ASRService/HealthCheck',
                request_serializer=common__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=common__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class ASRServiceServicer(object):
    """Automatic Speech Recognition service
    """

    def RecognizeSpeech(self, request, context):
        """Recognize speech from audio
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecognizeSpeechStream(self, request_iterator, context):
        """Stream-based speech recognition
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureASR(self, request, context):
        """Configure ASR parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSupportedLanguages(self, request, context):
        """Get supported languages and models
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ASRServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RecognizeSpeech': grpc.unary_unary_rpc_method_handler(
                    servicer.RecognizeSpeech,
                    request_deserializer=asr__service__pb2.RecognizeSpeechRequest.FromString,
                    response_serializer=asr__service__pb2.RecognizeSpeechResponse.SerializeToString,
            ),
            'RecognizeSpeechStream': grpc.stream_stream_rpc_method_handler(
                    servicer.RecognizeSpeechStream,
                    request_deserializer=asr__service__pb2.RecognizeSpeechRequest.FromString,
                    response_serializer=asr__service__pb2.RecognizeSpeechResponse.SerializeToString,
            ),
            'ConfigureASR': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureASR,
                    request_deserializer=asr__service__pb2.ConfigureASRRequest.FromString,
                    response_serializer=asr__service__pb2.ConfigureASRResponse.SerializeToString,
            ),
            'GetSupportedLanguages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSupportedLanguages,
                    request_deserializer=asr__service__pb2.GetSupportedLanguagesRequest.FromString,
                    response_serializer=asr__service__pb2.GetSupportedLanguagesResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=common__pb2.HealthCheckRequest.FromString,
                    response_serializer=common__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'opensips.ai.asr.ASRService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('opensips.ai.asr.ASRService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ASRService(object):
    """Automatic Speech Recognition service
    """

    @staticmethod
    def RecognizeSpeech(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.asr.ASRService/RecognizeSpeech',
            asr__service__pb2.RecognizeSpeechRequest.SerializeToString,
            asr__service__pb2.RecognizeSpeechResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecognizeSpeechStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/opensips.ai.asr.ASRService/RecognizeSpeechStream',
            asr__service__pb2.RecognizeSpeechRequest.SerializeToString,
            asr__service__pb2.RecognizeSpeechResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfigureASR(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.asr.ASRService/ConfigureASR',
            asr__service__pb2.ConfigureASRRequest.SerializeToString,
            asr__service__pb2.ConfigureASRResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSupportedLanguages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.asr.ASRService/GetSupportedLanguages',
            asr__service__pb2.GetSupportedLanguagesRequest.SerializeToString,
            asr__service__pb2.GetSupportedLanguagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.asr.ASRService/HealthCheck',
            common__pb2.HealthCheckRequest.SerializeToString,
            common__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
