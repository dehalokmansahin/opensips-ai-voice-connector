# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import common_pb2 as common__pb2
import vad_service_pb2 as vad__service__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in vad_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class VADServiceStub(object):
    """Voice Activity Detection service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DetectVoiceActivity = channel.unary_unary(
                '/opensips.ai.vad.VADService/DetectVoiceActivity',
                request_serializer=vad__service__pb2.DetectVoiceActivityRequest.SerializeToString,
                response_deserializer=vad__service__pb2.DetectVoiceActivityResponse.FromString,
                _registered_method=True)
        self.DetectVoiceActivityStream = channel.stream_stream(
                '/opensips.ai.vad.VADService/DetectVoiceActivityStream',
                request_serializer=vad__service__pb2.DetectVoiceActivityRequest.SerializeToString,
                response_deserializer=vad__service__pb2.DetectVoiceActivityResponse.FromString,
                _registered_method=True)
        self.ConfigureVAD = channel.unary_unary(
                '/opensips.ai.vad.VADService/ConfigureVAD',
                request_serializer=vad__service__pb2.ConfigureVADRequest.SerializeToString,
                response_deserializer=vad__service__pb2.ConfigureVADResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/opensips.ai.vad.VADService/HealthCheck',
                request_serializer=common__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=common__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class VADServiceServicer(object):
    """Voice Activity Detection service
    """

    def DetectVoiceActivity(self, request, context):
        """Process audio for voice activity detection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectVoiceActivityStream(self, request_iterator, context):
        """Stream-based VAD processing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureVAD(self, request, context):
        """Configure VAD parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VADServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DetectVoiceActivity': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectVoiceActivity,
                    request_deserializer=vad__service__pb2.DetectVoiceActivityRequest.FromString,
                    response_serializer=vad__service__pb2.DetectVoiceActivityResponse.SerializeToString,
            ),
            'DetectVoiceActivityStream': grpc.stream_stream_rpc_method_handler(
                    servicer.DetectVoiceActivityStream,
                    request_deserializer=vad__service__pb2.DetectVoiceActivityRequest.FromString,
                    response_serializer=vad__service__pb2.DetectVoiceActivityResponse.SerializeToString,
            ),
            'ConfigureVAD': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureVAD,
                    request_deserializer=vad__service__pb2.ConfigureVADRequest.FromString,
                    response_serializer=vad__service__pb2.ConfigureVADResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=common__pb2.HealthCheckRequest.FromString,
                    response_serializer=common__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'opensips.ai.vad.VADService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('opensips.ai.vad.VADService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VADService(object):
    """Voice Activity Detection service
    """

    @staticmethod
    def DetectVoiceActivity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.vad.VADService/DetectVoiceActivity',
            vad__service__pb2.DetectVoiceActivityRequest.SerializeToString,
            vad__service__pb2.DetectVoiceActivityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DetectVoiceActivityStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/opensips.ai.vad.VADService/DetectVoiceActivityStream',
            vad__service__pb2.DetectVoiceActivityRequest.SerializeToString,
            vad__service__pb2.DetectVoiceActivityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfigureVAD(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.vad.VADService/ConfigureVAD',
            vad__service__pb2.ConfigureVADRequest.SerializeToString,
            vad__service__pb2.ConfigureVADResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.vad.VADService/HealthCheck',
            common__pb2.HealthCheckRequest.SerializeToString,
            common__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
