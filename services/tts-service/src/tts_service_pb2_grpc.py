# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import common_pb2 as common__pb2
import tts_service_pb2 as tts__service__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in tts_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TTSServiceStub(object):
    """Text-to-Speech service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SynthesizeSpeech = channel.unary_unary(
                '/opensips.ai.tts.TTSService/SynthesizeSpeech',
                request_serializer=tts__service__pb2.SynthesizeSpeechRequest.SerializeToString,
                response_deserializer=tts__service__pb2.SynthesizeSpeechResponse.FromString,
                _registered_method=True)
        self.SynthesizeSpeechStream = channel.unary_stream(
                '/opensips.ai.tts.TTSService/SynthesizeSpeechStream',
                request_serializer=tts__service__pb2.SynthesizeSpeechRequest.SerializeToString,
                response_deserializer=tts__service__pb2.SynthesizeSpeechResponse.FromString,
                _registered_method=True)
        self.ConfigureTTS = channel.unary_unary(
                '/opensips.ai.tts.TTSService/ConfigureTTS',
                request_serializer=tts__service__pb2.ConfigureTTSRequest.SerializeToString,
                response_deserializer=tts__service__pb2.ConfigureTTSResponse.FromString,
                _registered_method=True)
        self.GetAvailableVoices = channel.unary_unary(
                '/opensips.ai.tts.TTSService/GetAvailableVoices',
                request_serializer=tts__service__pb2.GetAvailableVoicesRequest.SerializeToString,
                response_deserializer=tts__service__pb2.GetAvailableVoicesResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/opensips.ai.tts.TTSService/HealthCheck',
                request_serializer=common__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=common__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class TTSServiceServicer(object):
    """Text-to-Speech service
    """

    def SynthesizeSpeech(self, request, context):
        """Synthesize speech from text
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SynthesizeSpeechStream(self, request, context):
        """Stream-based speech synthesis
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureTTS(self, request, context):
        """Configure TTS parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableVoices(self, request, context):
        """Get available voices
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TTSServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SynthesizeSpeech': grpc.unary_unary_rpc_method_handler(
                    servicer.SynthesizeSpeech,
                    request_deserializer=tts__service__pb2.SynthesizeSpeechRequest.FromString,
                    response_serializer=tts__service__pb2.SynthesizeSpeechResponse.SerializeToString,
            ),
            'SynthesizeSpeechStream': grpc.unary_stream_rpc_method_handler(
                    servicer.SynthesizeSpeechStream,
                    request_deserializer=tts__service__pb2.SynthesizeSpeechRequest.FromString,
                    response_serializer=tts__service__pb2.SynthesizeSpeechResponse.SerializeToString,
            ),
            'ConfigureTTS': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureTTS,
                    request_deserializer=tts__service__pb2.ConfigureTTSRequest.FromString,
                    response_serializer=tts__service__pb2.ConfigureTTSResponse.SerializeToString,
            ),
            'GetAvailableVoices': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableVoices,
                    request_deserializer=tts__service__pb2.GetAvailableVoicesRequest.FromString,
                    response_serializer=tts__service__pb2.GetAvailableVoicesResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=common__pb2.HealthCheckRequest.FromString,
                    response_serializer=common__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'opensips.ai.tts.TTSService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('opensips.ai.tts.TTSService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TTSService(object):
    """Text-to-Speech service
    """

    @staticmethod
    def SynthesizeSpeech(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.tts.TTSService/SynthesizeSpeech',
            tts__service__pb2.SynthesizeSpeechRequest.SerializeToString,
            tts__service__pb2.SynthesizeSpeechResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SynthesizeSpeechStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/opensips.ai.tts.TTSService/SynthesizeSpeechStream',
            tts__service__pb2.SynthesizeSpeechRequest.SerializeToString,
            tts__service__pb2.SynthesizeSpeechResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfigureTTS(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.tts.TTSService/ConfigureTTS',
            tts__service__pb2.ConfigureTTSRequest.SerializeToString,
            tts__service__pb2.ConfigureTTSResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAvailableVoices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.tts.TTSService/GetAvailableVoices',
            tts__service__pb2.GetAvailableVoicesRequest.SerializeToString,
            tts__service__pb2.GetAvailableVoicesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.tts.TTSService/HealthCheck',
            common__pb2.HealthCheckRequest.SerializeToString,
            common__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
