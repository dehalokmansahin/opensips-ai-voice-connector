syntax = "proto3";

package opensips.ai.llm;

import "common.proto";

option go_package = "github.com/opensips/ai-voice-connector/proto/llm";

// Language Model service for banking conversations
service LLMService {
  // Generate response to user input
  rpc GenerateResponse(GenerateResponseRequest) returns (GenerateResponseResponse);
  
  // Stream-based response generation
  rpc GenerateResponseStream(GenerateResponseRequest) returns (stream GenerateResponseResponse);
  
  // Analyze user intent
  rpc AnalyzeIntent(AnalyzeIntentRequest) returns (AnalyzeIntentResponse);
  
  // Update conversation context
  rpc UpdateContext(UpdateContextRequest) returns (UpdateContextResponse);
  
  // Banking-specific intent processing
  rpc ProcessBankingIntent(ProcessBankingIntentRequest) returns (ProcessBankingIntentResponse);
  
  // Health check
  rpc HealthCheck(opensips.ai.common.HealthCheckRequest) returns (opensips.ai.common.HealthCheckResponse);
}

// LLM request messages
message GenerateResponseRequest {
  string session_id = 1;
  string user_input = 2;
  opensips.ai.common.ConversationContext context = 3;
  LLMConfig config = 4;
}

message GenerateResponseResponse {
  opensips.ai.common.Status status = 1;
  string session_id = 2;
  LLMResult result = 3;
  LLMMetrics metrics = 4;
}

// Intent analysis
message AnalyzeIntentRequest {
  string session_id = 1;
  string user_input = 2;
  opensips.ai.common.ConversationContext context = 3;
}

message AnalyzeIntentResponse {
  opensips.ai.common.Status status = 1;
  string session_id = 2;
  IntentAnalysis analysis = 3;
}

// Context management
message UpdateContextRequest {
  string session_id = 1;
  opensips.ai.common.ConversationContext context = 2;
  map<string, string> updates = 3;
}

message UpdateContextResponse {
  opensips.ai.common.Status status = 1;
  opensips.ai.common.ConversationContext updated_context = 2;
}

// Banking intent processing
message ProcessBankingIntentRequest {
  string session_id = 1;
  opensips.ai.common.BankingIntent intent = 2;
  opensips.ai.common.CustomerInfo customer = 3;
  opensips.ai.common.ConversationContext context = 4;
}

message ProcessBankingIntentResponse {
  opensips.ai.common.Status status = 1;
  string session_id = 2;
  BankingIntentResult result = 3;
}

// LLM configuration
message LLMConfig {
  string model_name = 1;           // llama, gpt-4, etc.
  float temperature = 2;           // 0.0 - 2.0
  int32 max_tokens = 3;
  float top_p = 4;
  repeated string stop_sequences = 5;
  string system_prompt = 6;
  bool enable_banking_safety = 7;  // Enable banking-specific safety filters
  string conversation_mode = 8;    // casual, formal, banking_professional
}

// LLM result structures
message LLMResult {
  string response_text = 1;
  float confidence = 2;
  IntentAnalysis intent_analysis = 3;
  repeated string suggested_actions = 4;
  bool requires_human_handoff = 5;
  ConversationState conversation_state = 6;
  repeated SafetyCheck safety_checks = 7;
}

message IntentAnalysis {
  opensips.ai.common.BankingIntent primary_intent = 1;
  repeated opensips.ai.common.BankingIntent alternative_intents = 2;
  map<string, string> extracted_entities = 3;
  float intent_confidence = 4;
}

message ConversationState {
  string current_topic = 1;
  string conversation_phase = 2;  // greeting, authentication, inquiry, resolution, closing
  bool authentication_required = 3;
  bool transaction_in_progress = 4;
  int32 turn_count = 5;
}

message SafetyCheck {
  string check_type = 1;          // pii_detection, banking_policy, content_filter
  bool passed = 2;
  string message = 3;
  map<string, string> details = 4;
}

// Banking intent processing
message BankingIntentResult {
  opensips.ai.common.BankingIntent intent = 1;
  string response_template = 2;
  repeated BankingAction required_actions = 3;
  AuthenticationRequirement auth_requirement = 4;
  ComplianceInfo compliance = 5;
}

message BankingAction {
  string action_type = 1;         // api_call, data_lookup, escalation
  string service_endpoint = 2;
  map<string, string> parameters = 3;
  bool requires_customer_consent = 4;
}

message AuthenticationRequirement {
  bool required = 1;
  repeated string auth_methods = 2;  // phone_verification, account_number, pin
  string reason = 3;
}

message ComplianceInfo {
  bool requires_audit_log = 1;
  string data_classification = 2;  // public, internal, confidential, restricted
  repeated string compliance_tags = 3;
  bool pii_detected = 4;
}

// LLM performance metrics
message LLMMetrics {
  float processing_time_ms = 1;
  int32 input_tokens = 2;
  int32 output_tokens = 3;
  float tokens_per_second = 4;
  string model_version = 5;
  float cpu_usage_percent = 6;
  float memory_usage_mb = 7;
  float gpu_usage_percent = 8;
}