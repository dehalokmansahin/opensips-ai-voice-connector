# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

try:
    from . import common_pb2 as common__pb2
except ImportError:
    import common_pb2 as common__pb2
import llm_service_pb2 as llm__service__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in llm_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LLMServiceStub(object):
    """Language Model service for banking conversations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateResponse = channel.unary_unary(
                '/opensips.ai.llm.LLMService/GenerateResponse',
                request_serializer=llm__service__pb2.GenerateResponseRequest.SerializeToString,
                response_deserializer=llm__service__pb2.GenerateResponseResponse.FromString,
                _registered_method=True)
        self.GenerateResponseStream = channel.unary_stream(
                '/opensips.ai.llm.LLMService/GenerateResponseStream',
                request_serializer=llm__service__pb2.GenerateResponseRequest.SerializeToString,
                response_deserializer=llm__service__pb2.GenerateResponseResponse.FromString,
                _registered_method=True)
        self.AnalyzeIntent = channel.unary_unary(
                '/opensips.ai.llm.LLMService/AnalyzeIntent',
                request_serializer=llm__service__pb2.AnalyzeIntentRequest.SerializeToString,
                response_deserializer=llm__service__pb2.AnalyzeIntentResponse.FromString,
                _registered_method=True)
        self.UpdateContext = channel.unary_unary(
                '/opensips.ai.llm.LLMService/UpdateContext',
                request_serializer=llm__service__pb2.UpdateContextRequest.SerializeToString,
                response_deserializer=llm__service__pb2.UpdateContextResponse.FromString,
                _registered_method=True)
        self.ProcessBankingIntent = channel.unary_unary(
                '/opensips.ai.llm.LLMService/ProcessBankingIntent',
                request_serializer=llm__service__pb2.ProcessBankingIntentRequest.SerializeToString,
                response_deserializer=llm__service__pb2.ProcessBankingIntentResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/opensips.ai.llm.LLMService/HealthCheck',
                request_serializer=common__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=common__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class LLMServiceServicer(object):
    """Language Model service for banking conversations
    """

    def GenerateResponse(self, request, context):
        """Generate response to user input
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateResponseStream(self, request, context):
        """Stream-based response generation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeIntent(self, request, context):
        """Analyze user intent
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateContext(self, request, context):
        """Update conversation context
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessBankingIntent(self, request, context):
        """Banking-specific intent processing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LLMServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateResponse,
                    request_deserializer=llm__service__pb2.GenerateResponseRequest.FromString,
                    response_serializer=llm__service__pb2.GenerateResponseResponse.SerializeToString,
            ),
            'GenerateResponseStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GenerateResponseStream,
                    request_deserializer=llm__service__pb2.GenerateResponseRequest.FromString,
                    response_serializer=llm__service__pb2.GenerateResponseResponse.SerializeToString,
            ),
            'AnalyzeIntent': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeIntent,
                    request_deserializer=llm__service__pb2.AnalyzeIntentRequest.FromString,
                    response_serializer=llm__service__pb2.AnalyzeIntentResponse.SerializeToString,
            ),
            'UpdateContext': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateContext,
                    request_deserializer=llm__service__pb2.UpdateContextRequest.FromString,
                    response_serializer=llm__service__pb2.UpdateContextResponse.SerializeToString,
            ),
            'ProcessBankingIntent': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessBankingIntent,
                    request_deserializer=llm__service__pb2.ProcessBankingIntentRequest.FromString,
                    response_serializer=llm__service__pb2.ProcessBankingIntentResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=common__pb2.HealthCheckRequest.FromString,
                    response_serializer=common__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'opensips.ai.llm.LLMService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('opensips.ai.llm.LLMService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LLMService(object):
    """Language Model service for banking conversations
    """

    @staticmethod
    def GenerateResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.llm.LLMService/GenerateResponse',
            llm__service__pb2.GenerateResponseRequest.SerializeToString,
            llm__service__pb2.GenerateResponseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateResponseStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/opensips.ai.llm.LLMService/GenerateResponseStream',
            llm__service__pb2.GenerateResponseRequest.SerializeToString,
            llm__service__pb2.GenerateResponseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeIntent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.llm.LLMService/AnalyzeIntent',
            llm__service__pb2.AnalyzeIntentRequest.SerializeToString,
            llm__service__pb2.AnalyzeIntentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.llm.LLMService/UpdateContext',
            llm__service__pb2.UpdateContextRequest.SerializeToString,
            llm__service__pb2.UpdateContextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessBankingIntent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.llm.LLMService/ProcessBankingIntent',
            llm__service__pb2.ProcessBankingIntentRequest.SerializeToString,
            llm__service__pb2.ProcessBankingIntentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.llm.LLMService/HealthCheck',
            common__pb2.HealthCheckRequest.SerializeToString,
            common__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
