version: '3.8'

# Development override for docker-compose.yml
# Usage: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
# 
# Key features:
# - Hot-reload source code mounting
# - Debug logging enabled
# - Faster startup with pre-built development images
# - Development-specific environment variables

services:
  # ASR Service - Development
  asr-service:
    build:
      context: .
      dockerfile: services/asr-service/Dockerfile.dev
      target: development
    volumes:
      # Hot-reload: mount source code for live development
      - ./services/asr-service/src:/app/src:rw
      - ./services/common:/app/common:ro
      - ./shared/proto_generated:/app/shared:ro
      - ./models/vosk/tr:/app/model:ro
    environment:
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app:/app/src:/app/common
      - DEVELOPMENT_MODE=1
      - ASR_ENABLE_DEBUG=1
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - ASR_HOT_RELOAD=1
    command: ["python", "-u", "/app/src/enhanced_asr_server.py"]
    # Override health check for faster development cycles
    healthcheck:
      interval: 15s
      timeout: 5s
      retries: 2
      start_period: 20s

  # LLM Service - Development  
  llm-service:
    build:
      context: .
      dockerfile: services/llm-service/Dockerfile.dev
      target: development
    volumes:
      # Hot-reload: mount source code for live development
      - ./services/llm-service/src:/app/src:rw
      - ./services/common:/app/common:ro
      - ./shared/proto_generated:/app/shared:ro
      - ./models/llm:/app/model:ro
      - ./models/rag_model:/app/rag_model:rw
    environment:
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app:/app/src:/app/common
      - DEVELOPMENT_MODE=1
      - LLM_ENABLE_DEBUG=1
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - LLM_HOT_RELOAD=1
      # CPU-only PyTorch for faster development startup
      - TORCH_FORCE_CPU=1
    command: ["python", "-u", "/app/src/enhanced_llm_server.py"]
    # Override health check for faster development cycles
    healthcheck:
      interval: 15s
      timeout: 5s
      retries: 2
      start_period: 30s

  # TTS Service - Development
  tts-service:
    build:
      context: .
      dockerfile: services/tts-service/Dockerfile.dev
      target: development
    volumes:
      # Hot-reload: mount source code for live development
      - ./services/tts-service/src:/app/src:rw
      - ./services/common:/app/common:ro
      - ./shared/proto_generated:/app/shared:ro
      - ./models/piper:/app/model:ro
    environment:
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app:/app/src:/app/common
      - DEVELOPMENT_MODE=1
      - TTS_ENABLE_DEBUG=1
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - TTS_HOT_RELOAD=1
    command: ["python", "-u", "/app/src/enhanced_tts_server.py"]
    # Override health check for faster development cycles
    healthcheck:
      interval: 15s
      timeout: 5s
      retries: 2
      start_period: 20s

  # Core Application - Development
  opensips-ai-core:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    volumes:
      # Hot-reload: mount source code for live development
      - ./core:/app/core:rw
      - ./shared/proto_generated:/app/shared:ro
      - ./config:/app/config:rw
      - ./logs:/app/logs:rw
    environment:
      - CORE_LOG_LEVEL=DEBUG
      - PYTHONPATH=/app:/app/core
      - DEVELOPMENT_MODE=1
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - CORE_HOT_RELOAD=1
      - CORE_ENABLE_DEBUG=1
    command: ["python", "-u", "/app/core/main.py"]
    ports:
      - "8080:8080"
      - "5060:5060/udp"
      - "10000-10100:10000-10100/udp"
    # Override health check for faster development cycles
    healthcheck:
      interval: 15s
      timeout: 5s
      retries: 2
      start_period: 30s

# Development-specific network optimizations
networks:
  opensips-ai-network:
    driver: bridge
    driver_opts:
      # Optimize for local development
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"