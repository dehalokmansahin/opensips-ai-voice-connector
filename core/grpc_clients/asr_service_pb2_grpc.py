# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import asr_service_pb2 as asr__service__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ASRServiceStub(object):
    """Automatic Speech Recognition service - based on Vosk implementation
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamingRecognize = channel.stream_stream(
                '/opensips.ai.asr.ASRService/StreamingRecognize',
                request_serializer=asr__service__pb2.StreamingRecognizeRequest.SerializeToString,
                response_deserializer=asr__service__pb2.StreamingRecognizeResponse.FromString,
                )
        self.Recognize = channel.unary_unary(
                '/opensips.ai.asr.ASRService/Recognize',
                request_serializer=asr__service__pb2.RecognizeRequest.SerializeToString,
                response_deserializer=asr__service__pb2.RecognizeResponse.FromString,
                )
        self.Configure = channel.unary_unary(
                '/opensips.ai.asr.ASRService/Configure',
                request_serializer=asr__service__pb2.ConfigureRequest.SerializeToString,
                response_deserializer=asr__service__pb2.ConfigureResponse.FromString,
                )
        self.HealthCheck = channel.unary_unary(
                '/opensips.ai.asr.ASRService/HealthCheck',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=asr__service__pb2.HealthResponse.FromString,
                )
        self.GetStats = channel.unary_unary(
                '/opensips.ai.asr.ASRService/GetStats',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=asr__service__pb2.StatsResponse.FromString,
                )


class ASRServiceServicer(object):
    """Automatic Speech Recognition service - based on Vosk implementation
    """

    def StreamingRecognize(self, request_iterator, context):
        """Stream-based speech recognition (primary method)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Recognize(self, request, context):
        """Single shot recognition
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Configure(self, request, context):
        """Configure recognition parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStats(self, request, context):
        """Get service stats
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ASRServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamingRecognize': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamingRecognize,
                    request_deserializer=asr__service__pb2.StreamingRecognizeRequest.FromString,
                    response_serializer=asr__service__pb2.StreamingRecognizeResponse.SerializeToString,
            ),
            'Recognize': grpc.unary_unary_rpc_method_handler(
                    servicer.Recognize,
                    request_deserializer=asr__service__pb2.RecognizeRequest.FromString,
                    response_serializer=asr__service__pb2.RecognizeResponse.SerializeToString,
            ),
            'Configure': grpc.unary_unary_rpc_method_handler(
                    servicer.Configure,
                    request_deserializer=asr__service__pb2.ConfigureRequest.FromString,
                    response_serializer=asr__service__pb2.ConfigureResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=asr__service__pb2.HealthResponse.SerializeToString,
            ),
            'GetStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStats,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=asr__service__pb2.StatsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'opensips.ai.asr.ASRService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ASRService(object):
    """Automatic Speech Recognition service - based on Vosk implementation
    """

    @staticmethod
    def StreamingRecognize(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/opensips.ai.asr.ASRService/StreamingRecognize',
            asr__service__pb2.StreamingRecognizeRequest.SerializeToString,
            asr__service__pb2.StreamingRecognizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Recognize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opensips.ai.asr.ASRService/Recognize',
            asr__service__pb2.RecognizeRequest.SerializeToString,
            asr__service__pb2.RecognizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Configure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opensips.ai.asr.ASRService/Configure',
            asr__service__pb2.ConfigureRequest.SerializeToString,
            asr__service__pb2.ConfigureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opensips.ai.asr.ASRService/HealthCheck',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            asr__service__pb2.HealthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opensips.ai.asr.ASRService/GetStats',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            asr__service__pb2.StatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
