---
description: 
globs: 
alwaysApply: true
---
# 🎯 OpenSIPS AI Voice Connector - Cursor Rules

## 📋 Proje Dokümanları
[PRD.MD](mdc:.cursor/rules/PRD.MD)
[event and mi datagram.md](mdc:.cursor/rules/event and mi datagram.md)
[example_opensips.md](mdc:.cursor/rules/example_opensips.md)
[pipecat implementations.md](mdc:.cursor/rules/pipecat implementations.md)
## 🏗️ Proje Mimarisi

Bu proje, **Pipecat** tabanlı gerçek zamanlı ses işleme pipeline'ı ile çalışan bir IVR sanal asistan sistemidir.

### Temel Bileşenler:
- **OAVC (OpenSIPS Audio/Video Connector)**: Ses taşıma katmanı
- **STT**: VOSK tabanlı konuşma tanıma
- **LLM**: Llama3.2 ile doğal dil işleme
- **TTS**: Piper ile metin-ses dönüşümü
- **Pipecat Pipeline**: VAD → STT → LLM → TTS akışı


## 💻 Kod Yazım Standartları

### Python Geliştirme Kuralları:
1. **Type Hints Kullanımı**: Tüm fonksiyonlarda type hints zorunlu
```python
async def process_audio_packet(self, pcm_bytes: bytes) -> None:
    pass
```

2. **Async/Await Pattern**: Tüm I/O operasyonları async olmalı
3. **Error Handling**: Try-catch blokları ile kapsamlı hata yönetimi
4. **Logging**: Structured logging ile detaylı log kayıtları
5. **Docstrings**: Google style docstrings kullanım

### Dosya Organizasyonu:
```
src/
├── pipeline/          # Pipecat pipeline components
├── services/          # External service integrations
├── utils/            # Utility functions
├── models/           # Data models and schemas
└── config/           # Configuration management
```

## 🔧 Geliştirme Talimatları

### Yeni Feature Geliştirme:
1. Önce `PRD.MD` dosyasını kontrol et
2. `RAG Pipecat.md` içindeki ilgili MVP'yi incele
3. Test-driven development yaklaşımı kullan
4. Pipeline pattern'ine uygun kod yaz

### Pipeline Geliştirme:
- Tüm pipeline bileşenleri `PipelineManager` üzerinden yönetilmeli
- Frame-based processing pattern'ini takip et
- Interruption handling için MinWordsInterruptionStrategy kullan
- VAD parametrelerini Türkçe konuşma için optimize et

### Ses İşleme:
- OAVC input: PCMU/8000 ulaw format (8-bit, 8kHz, mono)
- Pipeline decode: PCM 16-bit, 16kHz, mono (internal processing)
- Pipeline output: PCM 24kHz, mono (TTS çıkışı)
- PSTN output: PCMU/8000 ulaw format (8-bit, 8kHz, mono)
- Chunk size: 160 bytes (20ms frames)
- Hesaplama: 8000 sample/s × 0.020s × 1 byte = 160 bytes/frame

### Performans Hedefleri:
- VAD → STT: ≤ 500ms
- STT → LLM: ≤ 400ms  
- LLM → TTS: ≤ 700ms
- **Total Round-Trip: ≤ 1.5 saniye**

## 🧪 Test Stratejisi

### Kritik Test Alanları:
- [ ] OAVC ↔ Pipecat bağlantı testi
- [ ] VAD segmentasyon doğruluğu
- [ ] Barge-in (interruption) timing
- [ ] Türkçe STT accuracy (>92%)
- [ ] LLM intent detection
- [ ] TTS ses kalitesi
- [ ] End-to-end latency measurement

### Test Komutları:
```bash
# Unit tests
python -m pytest tests/unit/

# Integration tests  
python -m pytest tests/integration/

# Performance tests
python -m pytest tests/performance/ --benchmark
```

## 📊 Monitoring ve Observability

### Metrics Tracking:
- Audio processing latency
- STT accuracy rates
- LLM response times
- TTS generation speed
- Pipeline error rates
- Memory usage patterns

### Logging Requirements:
```python
import structlog

logger = structlog.get_logger()

# Her pipeline stage'inde log
logger.info("audio_processed", 
           stage="vad", 
           duration_ms=processing_time,
           frame_size=len(pcm_bytes))
```

## 🔒 Security Considerations

- PII data handling protocols
- Audio data encryption in transit
- LLM input sanitization
- Rate limiting for API calls
- Secure configuration management

## 🚀 Deployment

### Development Environment:
```bash
docker-compose -f docker-compose.dev.yml up
```

### Production Deployment:
- Kubernetes manifests in `/openshift/`
- ConfigMaps for environment-specific settings
- Health checks ve readiness probes
- Resource limits ve requests tanımları

## 📝 Commit Conventions

```
feat(pipeline): add voice activity detection
fix(tts): resolve audio quality issues  
docs(readme): update installation guide
test(vad): add unit tests for segmentation
refactor(llm): improve error handling
```

B2b Modülünü kullanmak gerekirse @b2b_entities usage.md bilgileri referans alınabilir


## 🤝 Code Review Checklist

- [ ] Type hints mevcut
- [ ] Error handling uygulanmış
- [ ] Tests yazılmış
- [ ] Performance impact değerlendirilmiş
- [ ] Documentation güncellenmiş
- [ ] Security implications kontrol edilmiş