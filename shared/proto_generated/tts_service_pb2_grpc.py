# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import tts_service_pb2 as tts__service__pb2


class TTSServiceStub(object):
    """Text-to-Speech service - based on Piper WebSocket implementation
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SynthesizeText = channel.unary_stream(
                '/opensips.ai.tts.TTSService/SynthesizeText',
                request_serializer=tts__service__pb2.SynthesizeRequest.SerializeToString,
                response_deserializer=tts__service__pb2.SynthesizeResponse.FromString,
                )
        self.SynthesizeSingle = channel.unary_unary(
                '/opensips.ai.tts.TTSService/SynthesizeSingle',
                request_serializer=tts__service__pb2.SynthesizeRequest.SerializeToString,
                response_deserializer=tts__service__pb2.SynthesizeResponse.FromString,
                )
        self.Configure = channel.unary_unary(
                '/opensips.ai.tts.TTSService/Configure',
                request_serializer=tts__service__pb2.ConfigureRequest.SerializeToString,
                response_deserializer=tts__service__pb2.ConfigureResponse.FromString,
                )
        self.GetVoices = channel.unary_unary(
                '/opensips.ai.tts.TTSService/GetVoices',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tts__service__pb2.VoicesResponse.FromString,
                )
        self.HealthCheck = channel.unary_unary(
                '/opensips.ai.tts.TTSService/HealthCheck',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tts__service__pb2.HealthResponse.FromString,
                )
        self.GetStats = channel.unary_unary(
                '/opensips.ai.tts.TTSService/GetStats',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tts__service__pb2.StatsResponse.FromString,
                )


class TTSServiceServicer(object):
    """Text-to-Speech service - based on Piper WebSocket implementation
    """

    def SynthesizeText(self, request, context):
        """Synthesize text to speech (streaming audio chunks)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SynthesizeSingle(self, request, context):
        """Single shot synthesis (for small texts)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Configure(self, request, context):
        """Configure TTS parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVoices(self, request, context):
        """Get available voices
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStats(self, request, context):
        """Get service stats
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TTSServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SynthesizeText': grpc.unary_stream_rpc_method_handler(
                    servicer.SynthesizeText,
                    request_deserializer=tts__service__pb2.SynthesizeRequest.FromString,
                    response_serializer=tts__service__pb2.SynthesizeResponse.SerializeToString,
            ),
            'SynthesizeSingle': grpc.unary_unary_rpc_method_handler(
                    servicer.SynthesizeSingle,
                    request_deserializer=tts__service__pb2.SynthesizeRequest.FromString,
                    response_serializer=tts__service__pb2.SynthesizeResponse.SerializeToString,
            ),
            'Configure': grpc.unary_unary_rpc_method_handler(
                    servicer.Configure,
                    request_deserializer=tts__service__pb2.ConfigureRequest.FromString,
                    response_serializer=tts__service__pb2.ConfigureResponse.SerializeToString,
            ),
            'GetVoices': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVoices,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tts__service__pb2.VoicesResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tts__service__pb2.HealthResponse.SerializeToString,
            ),
            'GetStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStats,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tts__service__pb2.StatsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'opensips.ai.tts.TTSService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TTSService(object):
    """Text-to-Speech service - based on Piper WebSocket implementation
    """

    @staticmethod
    def SynthesizeText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/opensips.ai.tts.TTSService/SynthesizeText',
            tts__service__pb2.SynthesizeRequest.SerializeToString,
            tts__service__pb2.SynthesizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SynthesizeSingle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opensips.ai.tts.TTSService/SynthesizeSingle',
            tts__service__pb2.SynthesizeRequest.SerializeToString,
            tts__service__pb2.SynthesizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Configure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opensips.ai.tts.TTSService/Configure',
            tts__service__pb2.ConfigureRequest.SerializeToString,
            tts__service__pb2.ConfigureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVoices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opensips.ai.tts.TTSService/GetVoices',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tts__service__pb2.VoicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opensips.ai.tts.TTSService/HealthCheck',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tts__service__pb2.HealthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opensips.ai.tts.TTSService/GetStats',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tts__service__pb2.StatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
