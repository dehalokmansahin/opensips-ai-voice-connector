# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import llm_service_simple_pb2 as llm__service__simple__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in llm_service_simple_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LLMServiceStub(object):
    """Simple LLM service - based on legacy WebSocket implementation
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessText = channel.unary_stream(
                '/opensips.ai.llm.LLMService/ProcessText',
                request_serializer=llm__service__simple__pb2.TextProcessingRequest.SerializeToString,
                response_deserializer=llm__service__simple__pb2.TextResponse.FromString,
                _registered_method=True)
        self.UpdateContext = channel.unary_unary(
                '/opensips.ai.llm.LLMService/UpdateContext',
                request_serializer=llm__service__simple__pb2.ContextUpdateRequest.SerializeToString,
                response_deserializer=llm__service__simple__pb2.ContextResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/opensips.ai.llm.LLMService/HealthCheck',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=llm__service__simple__pb2.HealthResponse.FromString,
                _registered_method=True)
        self.GetStats = channel.unary_unary(
                '/opensips.ai.llm.LLMService/GetStats',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=llm__service__simple__pb2.StatsResponse.FromString,
                _registered_method=True)


class LLMServiceServicer(object):
    """Simple LLM service - based on legacy WebSocket implementation
    """

    def ProcessText(self, request, context):
        """Process text and generate streaming response (main method)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateContext(self, request, context):
        """Update context
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStats(self, request, context):
        """Get service stats
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LLMServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessText': grpc.unary_stream_rpc_method_handler(
                    servicer.ProcessText,
                    request_deserializer=llm__service__simple__pb2.TextProcessingRequest.FromString,
                    response_serializer=llm__service__simple__pb2.TextResponse.SerializeToString,
            ),
            'UpdateContext': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateContext,
                    request_deserializer=llm__service__simple__pb2.ContextUpdateRequest.FromString,
                    response_serializer=llm__service__simple__pb2.ContextResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=llm__service__simple__pb2.HealthResponse.SerializeToString,
            ),
            'GetStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStats,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=llm__service__simple__pb2.StatsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'opensips.ai.llm.LLMService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('opensips.ai.llm.LLMService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LLMService(object):
    """Simple LLM service - based on legacy WebSocket implementation
    """

    @staticmethod
    def ProcessText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/opensips.ai.llm.LLMService/ProcessText',
            llm__service__simple__pb2.TextProcessingRequest.SerializeToString,
            llm__service__simple__pb2.TextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.llm.LLMService/UpdateContext',
            llm__service__simple__pb2.ContextUpdateRequest.SerializeToString,
            llm__service__simple__pb2.ContextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.llm.LLMService/HealthCheck',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            llm__service__simple__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/opensips.ai.llm.LLMService/GetStats',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            llm__service__simple__pb2.StatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
